/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { Context } from './../context'
import { core } from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "DateTime";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PostCreateInput: {
    // input type
    content?: string | null // String
    title: string // String!
  }
  PostOrderByUpdatedAtInput: {
    // input type
    updatedAt: NexusGenEnums['SortOrder'] // SortOrder!
  }
  UserCreateInput: {
    // input type
    email: string // String!
    name?: string | null // String
    posts?: NexusGenInputs['PostCreateInput'][] | null // [PostCreateInput!]
  }
  UserUniqueInput: {
    // input type
    email?: string | null // String
    id?: number | null // Int
  }
}

export interface NexusGenEnums {
  SortOrder: 'asc' | 'desc'
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {}
  Post: {
    // root type
    content?: string | null // String
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: number // Int!
    published: boolean // Boolean!
    title: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    viewCount: number // Int!
  }
  Query: {}
  User: {
    // root type
    email: string // String!
    id: number // Int!
    name?: string | null // String
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: {
    // field return type
    createDraft: NexusGenRootTypes['Post'] | null // Post
    deletePost: NexusGenRootTypes['Post'] | null // Post
    incrementPostViewCount: NexusGenRootTypes['Post'] | null // Post
    signupUser: NexusGenRootTypes['User'] // User!
    togglePublishPost: NexusGenRootTypes['Post'] | null // Post
  }
  Post: {
    // field return type
    author: NexusGenRootTypes['User'] | null // User
    content: string | null // String
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: number // Int!
    published: boolean // Boolean!
    title: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    viewCount: number // Int!
  }
  Query: {
    // field return type
    allUsers: NexusGenRootTypes['User'][] // [User!]!
    draftsByUser: Array<NexusGenRootTypes['Post'] | null> | null // [Post]
    feed: NexusGenRootTypes['Post'][] // [Post!]!
    postById: NexusGenRootTypes['Post'] | null // Post
  }
  User: {
    // field return type
    email: string // String!
    id: number // Int!
    name: string | null // String
    posts: NexusGenRootTypes['Post'][] // [Post!]!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: {
    // field return type name
    createDraft: 'Post'
    deletePost: 'Post'
    incrementPostViewCount: 'Post'
    signupUser: 'User'
    togglePublishPost: 'Post'
  }
  Post: {
    // field return type name
    author: 'User'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    published: 'Boolean'
    title: 'String'
    updatedAt: 'DateTime'
    viewCount: 'Int'
  }
  Query: {
    // field return type name
    allUsers: 'User'
    draftsByUser: 'Post'
    feed: 'Post'
    postById: 'Post'
  }
  User: {
    // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
    posts: 'Post'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDraft: {
      // args
      authorEmail: string // String!
      data: NexusGenInputs['PostCreateInput'] // PostCreateInput!
    }
    deletePost: {
      // args
      id: number // Int!
    }
    incrementPostViewCount: {
      // args
      id: number // Int!
    }
    signupUser: {
      // args
      data: NexusGenInputs['UserCreateInput'] // UserCreateInput!
    }
    togglePublishPost: {
      // args
      id: number // Int!
    }
  }
  Query: {
    draftsByUser: {
      // args
      userUniqueInput: NexusGenInputs['UserUniqueInput'] // UserUniqueInput!
    }
    feed: {
      // args
      orderBy?: NexusGenInputs['PostOrderByUpdatedAtInput'] | null // PostOrderByUpdatedAtInput
      searchString?: string | null // String
      skip?: number | null // Int
      take?: number | null // Int
    }
    postById: {
      // args
      id?: number | null // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = keyof NexusGenEnums

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
